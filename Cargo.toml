[workspace]
members = ["avian_bullet_trajectory", "egui_editor"]

[workspace.package]
authors = ["Eric Kwoka <43540491+ekwoka@users.noreply.github.com>"]
edition = "2024"
rust-version = "1.89"

[workspace.dependencies]
bevy = { version = "0.16", features = [
    "jpeg",
    "tga",
    "ktx2",
    "png",
    "wayland",
    # Due to some Bevy bug, we need to enable the UI debug plugin even in non-dev builds,
    # otherwise we only render the view model and the skybox.
    "bevy_ui_debug",
] }
bevy_enhanced_input = "0.18"

# Keep this in sync with Bevy
rand = "0.8"

# Compile low-severity logs out of native builds for performance.
log = { version = "0.4.28", features = [
    "max_level_debug",
    "release_max_level_warn",
] }
# Compile low-severity logs out of web builds for performance.
tracing = { version = "0.1.41", features = [
    "max_level_debug",
    "release_max_level_warn",
] }

# Physics
avian3d = "0.3"
avian_pickup = "0.2"

# Character Controller
bevy-tnua = "0.25"
bevy-tnua-avian3d = "0.6"

# Level editor
bevy_trenchbroom = { version = "0.9.3", features = ["avian"] }

bevy_simple_subsecond_system = { version = "0.2.0", git = "https://github.com/TheBevyFlock/bevy_simple_subsecond_system" }
bevy_gizmos = "0.16"
iyes_perf_ui = "0.5.0"
bevy_ui_anchor = "0.9.0"

# Our Packages
avian_bullet_trajectory = { path = "avian_bullet_trajectory" }
egui_editor = { path = "egui_editor" }

[workspace.metadata.bin]
cargo-edit = { version = "0.13.7", bins = ["cargo-rm", "cargo-upgrade"] }
cargo-make = { version = "0.37.24" }
cargo-nextest = { version = "0.9.102" }
cargo-watch = { version = "8.5.3" }
dioxus-cli = { version = "0.7.0-rc.0", bins = ["dx"] }

[package]
name = "bevy_3d"
version = "0.1.0"
authors.workspace = true
edition.workspace = true
rust-version.workspace = true


[dependencies]
bevy.workspace = true
bevy_enhanced_input.workspace = true
rand.workspace = true

log.workspace = true
tracing.workspace = true

# Physics
avian3d.workspace = true
avian_pickup.workspace = true

# Character Controller
bevy-tnua.workspace = true
bevy-tnua-avian3d.workspace = true

# Level editor
bevy_trenchbroom.workspace = true

bevy_simple_subsecond_system = { workspace = true, optional = true }
bevy_gizmos.workspace = true
iyes_perf_ui.workspace = true
bevy_ui_anchor.workspace = true

avian_bullet_trajectory.workspace = true
egui_editor = { workspace = true, optional = true, features = ["avian"] }

# Your web builds will start failing if you add a dependency that pulls in `getrandom` v0.3+.
# To fix this, you should tell `getrandom` to use the `wasm_js` backend on Wasm.
# See: <https://docs.rs/getrandom/0.3.3/getrandom/#webassembly-support>.
#[target.wasm32-unknown-unknown.dependencies]
#getrandom = { version = "0.3", features = ["wasm_js"] }
# In addition to enabling the `wasm_js` feature, you need to include `--cfg 'getrandom_backend="wasm_js"'`
# in your rustflags for both local and CI/CD web builds, taking into account that rustflags specified in
# multiple places are NOT combined (see <https://github.com/rust-lang/cargo/issues/5376>).
# Alternatively, you can opt out of the rustflags check with this patch:
#[patch.crates-io]
#getrandom = { git = "https://github.com/benfrankel/getrandom" }

[features]
# Default to a native dev build.
default = ["dev_native"]
editor = ["egui_editor"]
dev = [
    # Improve compile times for dev builds by linking Bevy as a dynamic library.
    "bevy/dynamic_linking",
    "bevy/bevy_dev_tools",
    "bevy/bevy_ui_debug",
    # Improve error messages coming from Bevy
    "bevy/track_location",
    "avian3d/diagnostic_ui",
]
dev_native = [
    "dev",
    # Enable asset hot reloading for native dev builds.
    "bevy/file_watcher",
    # Enable embedded asset hot reloading for native dev builds.
    "bevy/embedded_watcher",
]
hot_patch = ["dep:bevy_simple_subsecond_system"]
bevy_remote = ["bevy/bevy_remote"]


[package.metadata.bevy_cli.release]
# Disable dev features for release builds.
default-features = false

[package.metadata.bevy_cli.web]
# Disable native features for web builds.
default-features = false

[package.metadata.bevy_cli.web.dev]
features = ["dev"]


[lints.rust]
# Mark `bevy_lint` as a valid `cfg`, as it is set when the Bevy linter runs.
unexpected_cfgs = { level = "warn", check-cfg = ["cfg(bevy_lint)"] }

[lints.clippy]
# Bevy supplies arguments to systems via dependency injection, so it's natural for systems to
# request more than 7 arguments, which would undesirably trigger this lint.
too_many_arguments = "allow"
# Queries may access many components, which would undesirably trigger this lint.
type_complexity = "allow"
# Make sure macros use their standard braces, such as `[]` for `bevy_ecs::children!`.
nonstandard_macro_braces = "warn"

# You can configure the warning levels of Bevy lints here. For a list of all lints, see:
# <https://thebevyflock.github.io/bevy_cli/bevy_lint/lints/>
[package.metadata.bevy_lint]
# panicking_methods = "deny"
# pedantic = "warn"


# Compile with Performance Optimizations:
# <https://bevyengine.org/learn/quick-start/getting-started/setup/#compile-with-performance-optimizations>

# Enable a small amount of optimization in the dev profile.
[profile.dev]
opt-level = 1

# Enable a large amount of optimization in the dev profile for dependencies.
[profile.dev.package."*"]
opt-level = 3

# Remove expensive debug assertions due to <https://github.com/bevyengine/bevy/issues/14291>
[profile.dev.package.wgpu-types]
debug-assertions = false

[profile.release]
# Compile the entire crate as one unit.
# Slows compile times, marginal improvements.
codegen-units = 1
# Do a second optimization pass over the entire program, including dependencies.
# Slows compile times, marginal improvements.
lto = "thin"

# This profile will be used by `bevy run web` automatically.
[profile.web-release]
# Default to release profile values.
inherits = "release"
# Optimize with size in mind (also try "z", sometimes it is better).
# Slightly slows compile times, great improvements to file size and runtime performance.
opt-level = "s"
# Strip all debugging information from the binary to slightly reduce file size.
strip = "debuginfo"

# Optimize for build time in CI.
[profile.ci]
inherits = "dev"
opt-level = 0
debug = "line-tables-only"
codegen-units = 4

[profile.ci.package."*"]
opt-level = 0
